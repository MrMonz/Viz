' === DECLARACIÃ“N DE VARIABLES ===
dim HEIGHT, WIDTH, TOTAL, NUM_BRICKS as integer
dim currentBrick, currentRot, counter as integer
dim xpos, ypos as integer

dim squares as Array[integer]
dim squareContainers as Array[Container]
dim bricks as Array[string]
dim blockColors as Array[Vertex]

HEIGHT = 40
WIDTH = 20
TOTAL = HEIGHT * WIDTH

squares.size = TOTAL

sub OnInit()
    dim i, j as integer
    bricks.clear()
    blockColors.clear()

    ' === COLORES DE BLOQUES ===
    dim color as Vertex

    color.x = 1.0 
	color.y = 0.0 
	color.z = 0.0 ' Rojo (I)
    blockColors.push(color)

    color.x = 0.0 
	color.y = 1.0 
	color.z = 1.0 ' Cian (O)
    blockColors.push(color)

    color.x = 1.0 
	color.y = 1.0 
	color.z = 0.0 ' Amarillo (T)
    blockColors.push(color)

    color.x = 1.0 
	color.y = 0.5 
	color.z = 0.0 ' Naranja (L)
    blockColors.push(color)

    color.x = 0.0 
	color.y = 0.0 
	color.z = 1.0 ' Azul (J)
    blockColors.push(color)

    color.x = 0.0 
	color.y = 1.0 
	color.z = 0.0 ' Verde (S)
    blockColors.push(color)

    color.x = 0.5 
	color.y = 0.0 
	color.z = 0.5 ' Morado (Z)
    blockColors.push(color)

    ' === PIEZAS ===
    bricks.push("0100010001000100") ' I
    bricks.push("0000111100000000")
    bricks.push("0100010001000100")
    bricks.push("0000111100000000")

    bricks.push("0000000001100110") ' O
    bricks.push("0000000001100110")
    bricks.push("0000000001100110")
    bricks.push("0000000001100110")

    bricks.push("0000010001100010") ' T
    bricks.push("0000000001101100")
    bricks.push("0000010001100010")
    bricks.push("0000000001101100")

    bricks.push("0000001001100100") ' L
    bricks.push("0000000011000110")
    bricks.push("0000001001100100")
    bricks.push("0000000011000110")

    bricks.push("0000011000100010") ' J
    bricks.push("0000001011100000")
    bricks.push("0100010001100000")
    bricks.push("0000011101000000")

    bricks.push("0000011001000100") ' S
    bricks.push("0000111000100000")
    bricks.push("0010001001100000")
    bricks.push("0000010001110000")

    bricks.push("0000000011100100") ' Z
    bricks.push("0000010011000100")
    bricks.push("0000010011100000")
    bricks.push("0000010001100100")

    NUM_BRICKS = bricks.size / 4

    deleteGeometry
    update
    deleteChildren

    dim blocksGroup as Container
    blocksGroup = addContainer(TL_DOWN)

    for i = 0 to HEIGHT - 1
        for j = 0 to WIDTH - 1
            dim b as Container
            if i >= 3 then
                b = blocksGroup.addContainer(TL_DOWN)
                b.createMaterial
                b.name = "f_" & j & "_" & i
                b.createGeometry("BUILT_IN*GEOM*Cube")
                b.scaling.xyz = 0.1 ' Escala normal
                b.position.x = (j - WIDTH / 2.0 + 0.5) * 10.0
                b.position.y = - (i - HEIGHT / 2.0 - 1.0) * 10.0
            end if
            squareContainers.push(b)
        next
    next

    initGame
end sub

sub display()
    dim i, j, index, fb as integer
    dim fc as Container

    for i = 3 to HEIGHT - 1
        for j = 0 to WIDTH - 1
            index = i * WIDTH + j
            fb = squares[index]
            fc = squareContainers[index]
            if fb = 0 then
                fc.active = false
            else
                fc.active = true
                if fb >= 10 and fb < 10 + blockColors.size then
                    dim c as Vertex = blockColors[fb - 10]
                    fc.material.diffuse = CColor(c.x * 100.0, c.y * 100.0, c.z * 100.0)
                elseif fb = 3 then
                    fc.material.diffuse = CColor(30.0, 30.0, 30.0)
                else
                    fc.material.diffuse = CColor(60.0, 60.0, 60.0)
                end if
            end if
        next
    next
end sub

sub initGame()
    dim i as integer

    for i = 0 to TOTAL - 1
        squares[i] = 0
    next

    for i = 0 to HEIGHT - 1
        squares[WIDTH * i] = 3
        squares[WIDTH * i + WIDTH - 1] = 3
    next

    for i = TOTAL - WIDTH to TOTAL - 1
        squares[i] = 3
    next

    newBrick
    display
end sub

sub newBrick()
    xpos = WIDTH / 2 - 2
    ypos = -1
    counter = 0
    currentBrick = random(NUM_BRICKS)
    currentRot = 0
end sub

sub clear2()
    for i = 0 to TOTAL - 1
        if squares[i] = 2 then
            squares[i] = 0
        end if
    next
end sub

function drawBrick(x as integer, y as integer, rot as integer, fill as integer) as boolean
    dim b as string
    dim index, i, xb, yb, x2, y2 as integer

    clear2
    b = bricks[currentBrick * 4 + rot]
    for i = 0 to 15
        xb = i mod 4
        yb = i / 4
        if b.getChar(i) = "1" then
            x2 = x + xb
            y2 = y + yb
            if y2 >= 0 then
                index = y2 * WIDTH + x2
                if x2 < 0 or x2 >= WIDTH or y2 >= HEIGHT or squares[index] <> 0 then
                    drawBrick = false
                    exit function
                elseif y2 >= 3 or fill <> 1 then
                    if fill = 1 then
                        squares[index] = 10 + currentBrick ' Asignar color
                    else
                        squares[index] = fill
                    end if
                end if
            end if
        end if
    next

    drawBrick = true
end function

function isLineFilled(line as integer) as boolean
    dim i, index as integer
    index = WIDTH * line
    for i = 0 to WIDTH - 1
        if squares[index + i] = 0 then
            isLineFilled = false
            exit function
        end if
    next
    isLineFilled = true
end function

sub eraseFullLines()
    dim line, l2, r as integer
    for line = HEIGHT - 2 to 0 step -1
        if isLineFilled(line) then
            for l2 = line to 0 step -1
                for r = 0 to WIDTH - 1
                    squares[l2 * WIDTH + r] = squares[(l2 - 1) * WIDTH + r]
                next
            next
            for r = 1 to WIDTH - 2
                squares[r] = 0
            next
            line++
        end if
    next
end sub

sub OnKeyDown(keyCode as integer)
    dim x, y, r as integer

    x = xpos
    y = ypos
    r = currentRot

    if keyCode = KEY_RIGHT then
        x++
    elseif keyCode = KEY_LEFT then
        x--
    elseif keyCode = KEY_DOWN then
        y++
    elseif keyCode = KEY_S then
        initGame
        exit sub
    elseif keyCode = KEY_CONTROL then
        r = (r + 1) mod 4
    end if

    if r <> currentRot then
        if drawBrick(x, y, r, 2) then
            currentRot = r
        elseif drawBrick(x - 1, y, r, 2) then
            xpos = x - 1
            currentRot = r
        elseif drawBrick(x + 1, y, r, 2) then
            xpos = x + 1
            currentRot = r
        else
            drawBrick(xpos, ypos, currentRot, 2)
        end if
    elseif x <> xpos or y <> ypos then
        if drawBrick(x, y, r, 2) then
            xpos = x
            ypos = y
        else
            drawBrick(xpos, ypos, currentRot, 2)
        end if
    end if

    display
end sub

sub OnExecPerField()
    counter++
    if counter > 20 then ' velocidad
        counter = 0
        if drawBrick(xpos, ypos + 1, currentRot, 2) then
            ypos++
        else
            drawBrick xpos, ypos, currentRot, 1
            eraseFullLines
            newBrick
        end if
        display
    end if
end sub

